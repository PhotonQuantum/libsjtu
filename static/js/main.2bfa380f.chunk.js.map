{"version":3,"sources":["component/Bar.js","component/ListView.js","lib/fetcher.js","HomeView.js","App.js","serviceWorker.js","index.js"],"names":["colorList","green","blue","yellow","red","default","Bar","props","name","rest","max","percentage","style","makeStyles","val","scheme","barColor","colorPrimary","backgroundColor","barColorPrimary","mapColor","display","flexDirection","marginLeft","marginRight","width","marginBottom","LinearProgress","variant","value","classes","ListView","title","listData","data","length","filter","e","sort","a","b","Grid","container","spacing","direction","map","ele","item","key","getLibraryData","onSuccess","onFail","axios","get","process","then","res","status","dataLibMatcher","match","dataLib","JSON","parse","numbers","catch","getCanteenData","HomeView","useState","dataCanteen","setDataCanteen","setDataLib","showSnackbar","setShowSnackbar","snackbarMsg","setSnackbarMsg","fetchData","openSnackbar","msg","useEffect","interval","setInterval","clearInterval","Container","justify","areaName","inCounter","Name","Seat_s","Seat_u","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","severity","App","className","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2bfa380f.chunk.js","sourcesContent":["import React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport PropTypes from 'prop-types';\n\nconst colorList = {\n  green: ['#4caf50', '#e8f5e9'],\n  blue: ['#2196f3', '#e3f2fd'],\n  yellow: ['#ff9800', '#fff3e0'],\n  red: ['#f44336', '#fbe9e7'],\n  default: ['#90caf9', '#a6d4fa'],\n};\n\nconst Bar = (props) => {\n  const name = props.name;\n  const rest = props.rest;\n  const max = props.max;\n  const percentage = (rest / max) * 100;\n\n  const mapColor = (val) => {\n    let scheme = '';\n    if (val >= 75) {\n      scheme = 'green';\n    } else if (val >= 50) {\n      scheme = 'blue';\n    } else if (val >= 25) {\n      scheme = 'yellow';\n    } else if (val >= 0) {\n      scheme = 'red';\n    } else {\n      scheme = 'default';\n    }\n    const barColor = colorList[scheme][0];\n    const color = colorList[scheme][1];\n    return {\n      colorPrimary: {\n        backgroundColor: color,\n      },\n      barColorPrimary: {\n        backgroundColor: barColor,\n      },\n    };\n  };\n  const style = makeStyles(() => mapColor(percentage));\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', marginLeft: '10px', marginRight: '10px' }}>\n      <div style={{ display: 'flex', flexDirection: 'row', width: '100%', marginBottom: '10px' }}>\n        <div style={{ marginRight: 'auto' }}>{name}</div>\n        <div style={{ marginLeft: 'auto' }}>\n          <b>{rest}</b>/{max}\n        </div>\n      </div>\n      <LinearProgress variant=\"determinate\" value={percentage} classes={style()} />\n    </div>\n  );\n};\n\nexport default Bar;\n\nBar.propTypes = {\n  name: PropTypes.string.isRequired,\n  rest: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport Bar from './Bar';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\n\nconst ListView = (props) => {\n  const title = props.title;\n  const listData = props.data && props.data.length > 0 ? props.data.filter((e) => e.max > 0).sort((a, b) => b.rest / b.max - a.rest / a.max) : [];\n  const renderList = (list) =>\n    list.map((ele) => (\n      <Grid item key={ele.name}>\n        <Bar name={ele.name} rest={ele.rest} max={ele.max} key={ele.name} />\n      </Grid>\n    ));\n\n  return (\n    <>\n      <h2>{title}</h2>\n      <Grid container spacing={4} direction=\"column\">\n        {renderList(listData)}\n      </Grid>\n    </>\n  );\n};\n\nexport default ListView;\n\nListView.propTypes = {\n  title: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string, rest: PropTypes.number, max: PropTypes.number })).isRequired,\n};\n","import axios from 'axios';\n\nconst libraryUrl = process.env.REACT_APP_LIBRARY_PROXY;\n\nexport const getLibraryData = async (onSuccess, onFail) => {\n  axios\n    .get(libraryUrl)\n    .then((res) => {\n      if (res.status === 200) {\n        const dataLibRaw = res.data;\n        const dataLibMatcher = dataLibRaw.match(/CountPerson\\((.*)\\)/);\n        const dataLib = dataLibMatcher.length > 1 ? JSON.parse(dataLibMatcher[1]).numbers : [];\n        onSuccess && onSuccess(dataLib);\n      } else {\n        onFail && onFail();\n      }\n    })\n    .catch(() => onFail && onFail());\n};\n\nexport const getCanteenData = async (onSuccess, onFail) => {\n  axios\n    .get('https://canteen.sjtu.edu.cn/CARD/Ajax/Place')\n    .then((res) => {\n      if (res.status === 200) {\n        onSuccess && onSuccess(res.data);\n      } else {\n        onFail && onFail();\n      }\n    })\n    .catch(() => onFail && onFail());\n};\n","import React, { useEffect, useState } from 'react';\nimport ListView from './component/ListView';\nimport { Container, Grid, Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { getCanteenData, getLibraryData } from './lib/fetcher';\n\nconst HomeView = () => {\n  const [dataCanteen, setDataCanteen] = useState([]);\n  const [dataLib, setDataLib] = useState([]);\n  const [showSnackbar, setShowSnackbar] = useState(false);\n  const [snackbarMsg, setSnackbarMsg] = useState('');\n\n  const fetchData = async () => {\n    const openSnackbar = (msg) => {\n      setShowSnackbar(true);\n      setSnackbarMsg(msg);\n    };\n    getCanteenData(\n      (data) => setDataCanteen(data),\n      () => {\n        openSnackbar('😥 获取食堂数据失败');\n      }\n    );\n    getLibraryData(\n      (data) => setDataLib(data),\n      () => {\n        openSnackbar('😫 获取图书馆数据失败');\n      }\n    );\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [snackbarMsg]);\n\n  useEffect(() => {\n    const interval = setInterval(() => fetchData(), 20000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const closeSnackbar = () => {\n    setShowSnackbar(false);\n    setSnackbarMsg('');\n  };\n\n  return (\n    <>\n      <Container>\n        <Grid container justify=\"center\">\n          <ListView title=\"📖\" data={dataLib.map((e) => ({ name: e.areaName, rest: e.max - e.inCounter, max: e.max }))} />\n          <ListView title=\"🍴\" data={dataCanteen.map((e) => ({ name: e.Name, rest: e.Seat_s - e.Seat_u, max: e.Seat_s }))} />\n        </Grid>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={showSnackbar}\n          autoHideDuration={2000}\n          onClose={() => closeSnackbar()}\n        >\n          <MuiAlert severity=\"error\">{snackbarMsg}</MuiAlert>\n        </Snackbar>\n      </Container>\n    </>\n  );\n};\n\nexport default HomeView;\n","import React from 'react';\nimport HomeView from './HomeView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomeView />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType !== null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}